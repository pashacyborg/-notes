#include <iostream>
#include <string>

using namespace std;

/*Указатель на функцию, синтаксис: тип-данных_(*имя-указателя)_(параметры функции)
Используя указатель на фукнцию мы можем добиться эффекта, похожего на полиморфизм в ООП.
Полиморфизм - способность функции обрабатывать данные разных типов.

Для нас сейчас полиморфизм: возможность написать какую-то фукнцию, которая будет делать что-то, но мы даже
не будем знать что она делает и то, что она делает, будет зависеть от того, какой параметр она будет принимать.

Ситуация: вы являетесь сотрудником компании, которая занимается производством программного обеспечения.
Была поставлена задача написать определенный проект, у вас в команде двое коллег. Одному из них нужно
написать функцию, которая будет получать данные для вас из базы данных(чтобы вы их потом отображали), другой
должен написать функцию, которая будет запрашивать такие данные с удаленного сервера черерз интернет(см case 3)
Первая проблема: вы не знаете как называется функция ваших коллег. Они еще не придумали(вы не знаете к какой функции
обращаться).
Но таких функций может быть куча, а коллег - десятки. И каждый раз придется усложнять собственную конструкцию
кода, добавлять новый функционал.
Во третьем кейсе мы придумали велосипед: создали функцию showData, которая регулирует поведение остальных функций

Задача: сделать такую конструкцию, котора будет подходить для всех функций схожего типа(одинаковые параметры,
одинаковое возвращаемое значение). Пример: void universalConstruction(string(*func)()). string(*func)() - это параметр
в виде функции. Тип данных - string, на вход принимает адрес указателя(строка это указатель/массив), без параметров.

*/

//void func1()
//{
//	cout << "i am func1" << endl;
//}
//
//void func2()												//case 1
//{
	//cout << "i am func2" << endl;
//}

//int func3(int a)
//{
//	return a + 5;
//}
//															//case 2
//int func4(int a)
//{
//	return a * 5;
//}


//string dataFromBD()
//{
//	return "dataFromBD";
//}
//
//string dataFromWebServer()
//{
//	return "dataFromWebServer";
//}															//case 3
//
//void showData(bool isFromBD)
//{
//	if (isFromBD)
//	{
//		cout << dataFromBD() << endl;
//	}
//	else
//	{
//		cout << dataFromWebServer() << endl;
//	}
//}

string GetDataType1()
{
	return "data type 1";
}

string GetDataType2()
{
	return "data type 2";
}
															//case 4
string GetDataType3()
{
	return "data type 3";
}

void universalConstruction(string(*func)())
{
	cout << func() << endl;
}


void main()
{
	/*void(*funcPointer)();			//Инициализация указателя на функцию(шаблон)
	funcPointer = func2;			//Присваиваем указателю адрес функции
	funcPointer();*/				//Обращаемся к функции через указатель

	
	/*int(*funcPointer)(int k);
	funcPointer = func4;					//for case 2
	cout << funcPointer(10) << endl;*/


	//showData(true);							//for case 3


	universalConstruction(GetDataType1);		//for case 4
}