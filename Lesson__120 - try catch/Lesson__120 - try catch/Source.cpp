#include <iostream>
#include <string>
#include <fstream>

using namespace std;

/*try catch - Обработка исключительных ситуаций.
* 
* В блоке try мы пытаемся что-то выполнить. Если в рамках этого блока все ок, код выполняется без исключительных ошибок, 
* тогда ничего нового - программа просто выполнится. Если все-таки появляется исключительная ситуация, тогда отработает блок catch
* 
* То, что мы получим в блок catch, зависит от разработчика класса, с которым мы работаем. Мы сами можем описывать такие ситуации
* К примеру, в классе Ifstream обработка исключительных ситуаций по дефолту отключена. Однако, если мы вызовем метод exceptions у объекта 
* fstream с параметрами (ifstream::badbit | fstream::failbit) - можно работать с конструкцией try catch. 
* exceptions - с англ исключения. 
* 
* Если в блоке try что-то сломалось, то все, что находится в коде ниже поломки, выполнятся не будет.
* 
* В блоке catch с помощью метода what() у объекта класса exception мы можем узнать больше об ошибке. 
* Класс exception это готовый базовый класс, в котором прописаны уже многие ошибки. Например, при делении на ноль.
* В параметрах catch мы можем указатель специальный класс exception, например для ifstream. Такой класс будет выглядеть так: ifstream::failure
* У такого класса есть, например, метод code(), который позволяет посмотреть код ошибки.
* 
*/

int main()
{
	setlocale(LC_ALL, "ru");

	ifstream fin;
	string path = "maslo.txt";	//Если мы деформируем название файла и тот не сможет открыться, мы увидим описание ошибки.
	fin.exceptions(ifstream::badbit | ifstream::failbit);

	try
	{
		cout << "Попытка открытия файла" << endl;
		fin.open(path);
		cout << "Файл открыт!" << endl;
		fin.close();
	}
	catch (const ifstream::failure& ex)
	{
		cout << "Ошибка открытия файла!" << endl;
		cout << ex.what() << endl;
		cout << ex.code() << endl;
	}

	return 0;
}