#include <iostream>

using namespace std;

/*Конструктор класса - такая сущность, которая предназначена для того, чтобы инициализировать состояния класса в 
какое-то начальное значение, которое нужно вам.
Конструктор класса - это функция, которая не возвращает никакого значения(никакого, даже void). Называется такая функция, 
как имя нашего класса, пишется с круглыми скобками: Coordinate() {}

Вручную вызвать конструктора класса мы не можем, он вызывается сам, в момент создания класса. Конструктор есть у любого класса, 
даже если он не задан явно(конструктор по умолчанию. Он кстати пустой как в примере выше)

Допустим мы хотим, чтобы у свойств нашего класса были определенные начальные значения. Для того, чтобы это реализовать, 
во входных параметрах конструктора класса должны быть те же типы данных, что и у свойств, начальные значения которым мы 
хотим установить. Именование параметров так же делать по смыслу. 

Теперь, когда мы явно указали конструктор класса, мы не сможем просто создать объект как делали это раньше. Придется
указывть внутри объекта аргументы на основе тех параметров, которые принимает конструктор класса.
Оно и лучше, ведь теперь нам не нужно тыкать вручную каждое поле с помощью сеттера, мы вписываем нужные данные в свойства 
объекта прямо при его создании

Класс - схема, по которой должен создаваться объект. Объекты хранятся в разных областях памяти, друг на друга на влияют

Конструктор вручную(через объект с точкой) мы вызвать не можем. Он вызывается только в момент создания нашего объекта. 
Важно: если мы хотим пользоваться конструктором класса, то он должен быть в Public секции. Если задвинуть его в private, 
то мы не сможем создавать объекты(однако такие случаи используются, например для реализации шаблона проектирования синглтон)

*/


class Coordinate
{
private:
	int x;
	int y;

public:
	Coordinate(int numberX, int numberY)
	{
		x = numberX;
		y = numberY;
	}

	int GetX()
	{
		return x;
	}

	void SetX(int numberX)
	{
		x = numberX;
	}

	int GetY()
	{
		return y;
	}

	void SetY(int numberY)
	{
		y = numberY;
	}

	void Print()
	{
		cout << "x = " << x << "\ny = " << y << endl;
	}

};

int main()
{
	setlocale(LC_ALL, "ru");

	Coordinate pointOne(5, 10);
	pointOne.Print();

	Coordinate pointTwo(228, 1337);
	pointTwo.Print();

	Coordinate pointThree(1, 2);
	pointThree.Print();

	return 0;
}
