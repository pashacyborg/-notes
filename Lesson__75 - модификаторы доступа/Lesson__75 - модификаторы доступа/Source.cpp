#include <iostream>

using namespace std;

/*Существуют три модификатора доступа: public: private: protected: 
По дефолту(если явно не задан) устанавливается модификатор private. Если мы попробуем обратиться к полям класса через
объект, у нас ничего не получится.
Доступ к таким полям открыт только самому классу(элементам внутри этого класса), либо дружественным классам и функциям

Если модификатор public, то с помощью объекта мы можем добраться до полей класса(внутри public)
Все поля, которые идут после public, будут относиться к нему до тех пор, пока компиллятор не встретит другой модификатор

protected похож на private, Но разница в наследовании

Если какая-то функция принадлежит конкретному классу, то она имеет доступ ко всем полям этого класса(будь то поля
с модификатором private или protected)

Если метод находится в секции private, получить доступ к нему напрямую через объект не получится. Зато, если внутри класса
вызвать приватный метод внутри публичного метода, то обратившись к публичному методу мы опосредованно вызовем приватный
*/

class Coordinate
{
public: 
	int x = 5;
	int y = 10;
	
	void maslo()
	{
		cout << "\nx: " << x << "\ny: " << y << "\nz: " << z << endl;
		privateMaslo();
	}
private:
	int z = 228;

	void privateMaslo()
	{
		cout << "<(^_^)>" << endl;
	}
};

int main()
{
	Coordinate pointOne;
	pointOne.maslo();				//Получили доступ к значению координаты z, хотя она private. 
									//А так же к методу privateMaslo. Ведь мы обращаемся к публичному методу maslo :))
	return 0;
}