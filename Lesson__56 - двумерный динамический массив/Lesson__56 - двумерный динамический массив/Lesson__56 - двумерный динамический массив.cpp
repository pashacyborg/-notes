#include <iostream>

using namespace std;


/*Многомерный массив - это одномерный массив одномерных массивов, где каждый элемент изначального одномерного
массива содержит в себе вместо переменной указатель на другой одномерный массив. Который в себе содержит либо несколько
переменных(двумерный массив), либо указатель на еще один массив(тогда он не двумерный, а трехмерный и тд)
Двумерный массив - это указатель на массив из указателей(**). 
Не забываем про правило: написали new, сразу пишем delete
Массив - неделимая часть памяти(мы можем по ней итерироваться с помощью арифметики указателей)
В случае с многомерным массивом - каждый отдельный массивчик может быть разбросан в памяти относительно
другого такого массива
При очистке памяти от многомерного динамического массива, нам сначала нужно почистить более глубокие уровни
массивов, затем более верхние. Удалив основной динамический массив, указатели внутри него не перестанут
указывать на внутренние динамические массивы. Удалив внешний - внутренние останутся и произойдет утечка 
памяти. Поэтому нужно двигаться снизу вверх. 
Чистить память "внутренних" массивов надо с помощью цикла и команды delete ДЛЯ МАССИВА(с квадратными
скобками). Если использовать delete и имя массива, не получится. Правильно: delete[] arr[i]
*/

void main()
{
	setlocale(LC_ALL, "ru");
	int row, col;
	cout << "Введите количество строк" << endl;
	cin >> row;
	cout << "Введите количество столбцов" << endl;
	cin >> col;
	cout << endl;

	///////////////////////////////////////////////////////

	int** array = new int* [row];

	for (int i = 0; i < row; i++)		//Выделение памяти под двумерный массив
	{
		array[i] = new int[col];
	}

	///////////////////////////////////////////////////////

	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			array[i][j] = rand() % 10;		//Заполнение и вывод массива
			cout << array[i][j] << "\t";
		}
		cout << endl;
	}

	///////////////////////////////////////////////////////

	for (int i = 0; i < row; i++)
	{
		delete[] array[i];		//Удаление внутреннего массива(каждого внутреннего массива разом)
	}

	delete[] array;		//И внешнего(основного)

	///////////////////////////////////////////////////////
}