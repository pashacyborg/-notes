#include <iostream>

using namespace std;

/*По принципу инкапсуляции предоставлять прямой доступ(через public) к главным свойствам класса запрещено
Для того, чтобы получать доступ к данным принято организовывать работу класса так, чтобы у поля, с которым мы 
будем взаимодействовать был геттер и сеттер. Геттеры и сеттеры - обыкновенные методы класса(функции), которые отвечают за то, 
чтобы взаимодействовать с каким-то конкретным полем(в большинстве случаев)

get от англ. получить, set от англ. установить. Геттеры и сеттеры надо прописывать в public, они помогут организовать
взаимодействие с полями из private. 
Если наш метод должен что-то вернуть(получить от класса), то его название должно начинаться от слова Get(так принято)
Поэтому в любом классе достаточно через точку написать слово Get и вы сможете увидеть, что можете из него получить.

Сеттер не возвращает никакого значения, поэтому его тип void. Название такого метода начинается со слова Set.
Так как этим методом мы для нашего поля будем устанавливать значение, мы должны знать, какое значение мы должны установить,
поэтому наш сеттер должен принимать переменную с одинаковым типом данных, что и искомое поле. Но пока что с другим именем, 
т.к. недостаточно знаний, чтобы внутри сеттера написать x=x. Пример: value Setx(int valueX) { x = valueX }
Почему print мы не пишем входные параметры, а для сеттера пишем? Потому что print принимает параметры из самого класса - 
он их видит по дефолту. А сеттеру мы задаем значение из внешней функции(в данном случае из main)

Теперь в нашем классе есть два метода как часть интерфейса нашего класса(установить значение переменной и получить значение
переменной). Запишем еще один матод: метод Print. 

При реализации любых методов(функций) не забывай про круглые скобки в момент вызова этих методов. 

Все это - пример инкапсуляции. Сторонний программист не имеет прямого доступа к данным и не может напрямую изменить логику 
нашей программы(например то, что наш входной параметр y всегда умножается на 2), а может работать только через интерфейсы(которые работают так, как мы предусмотрели)

Для каких-то полей нужен только геттер, для других только сеттер, для третьих и то и то. Нужно действовать по ситуации
*/

class Coordinate
{
public:
	int GetX()
	{
		return x;
	}

	void SetX(int numberX)
	{
		x = numberX;
	}

	int GetY()
	{
		return y;
	}

	void SetY(int numberY)
	{
		y = numberY * 2;
	}

	void Print()
	{
		cout << "x = " << x << "\ny = " << y << endl;
	}

private:
	int x;
	int y;
};

void main()
{
	setlocale(LC_ALL, "ru");

	Coordinate pointOne;
	pointOne.SetX(228);
	pointOne.Print();
	int value = pointOne.GetX();
	cout << value << endl;

	pointOne.SetY(1337);
	int value2 = pointOne.GetY();
	cout << value2 << endl;

	pointOne.Print();
}